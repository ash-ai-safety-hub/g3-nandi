{
 "find_acronym_meaning": {
  "template": "{% set random_abbr = '' %}\n{% set _dummy = none %}\n{% set abbr_exp_dict = namespace(value = {}) %}\n{% set abbr_string=namespace(value='') %}\n{% set exp_string=namespace(value='')%}\n \n{% for label_idx in range(labels|length) %}\n  {% if labels[label_idx] == 0 %}{# Long Beginning #}\n    {% set exp_string.value = tokens[label_idx] %}{# Create new long string #}\n  {% elif labels[label_idx] == 1 %}{# Short Beginning #}\n    {% if abbr_string.value!='' and abbr_string.value not in abbr_exp_dict.value.keys()%}{# Some string already present #}\n      {% set _dummy = abbr_exp_dict.value.update({abbr_string.value:''}) %}{# Discard this string as a new short string is coming #}\n    {% endif %}\n    {% set abbr_string.value = tokens[label_idx] %}{# Create new short string #}\n  {% elif labels[label_idx] == 2 %}{# Long Intermediate #}\n    {% set exp_string.value = exp_string.value+' '+tokens[label_idx] %}{# Update existing string #}\n  {% elif labels[label_idx] == 3 %}{# Short Intermediate #}\n    {% set abbr_string.value = abbr_string.value+tokens[label_idx] %}{# Update existing string #}\n  {% else %}{# Other #}\n    {# Both non-empty, and first characters match #}\n    {% if abbr_string.value!='' and exp_string.value!='' and exp_string.value.split()[0][0]|lower in abbr_string.value|lower and exp_string.value.split()[-1][0]|lower in abbr_string.value|lower%}\n      {# Update both the dictionaries #}\n      {% set _dummy = abbr_exp_dict.value.update({abbr_string.value:exp_string.value}) %}\n      {# Empty both the strings #}\n      {% set abbr_string.value= '' %}\n      {% set exp_string.value= '' %}\n    {% endif %}\n  {% endif %}\n{% endfor %}\n{# Both non-empty, and first characters match #}\n{% if abbr_string.value!='' and exp_string.value!='' %}\n  {% if exp_string.value.split()[0][0]|lower in abbr_string.value|lower and exp_string.value.split()[-1][0]|lower in abbr_string.value|lower %}\n    {# Update both the dictionaries #}\n    {% set _dummy = abbr_exp_dict.value.update({abbr_string.value:exp_string.value}) %}\n  {% elif abbr_exp_dict.value.items()|length==0 %}\n    {% set _dummy = abbr_exp_dict.value.update({abbr_string.value:exp_string.value}) %}\n  {% endif %}\n{% else %}\n  {% if abbr_string.value!=''%}\n    {% if abbr_string.value not in abbr_exp_dict.value.keys() %}\n      {% set _dummy = abbr_exp_dict.value.update({abbr_string.value:''}) %}\n    {% endif %}\n  {% endif %}\n{% endif %}\n{% if abbr_exp_dict.value %}\n{% set random_abbr = abbr_exp_dict.value.keys()|list|choice %}\nGiven the tokens below, find the expansion (acronym meaning) of \"{random_abbr}\". Return {\"\\\"Unclear\\\"\"} if the expansion can't be found.\n \nTokens: {tokens|join(' ')}\nExpansion:",
  "choices_template": null
 },
 "acronyms_and_expansions_bio_encode": {
  "template": "Specification for BIO tags:  \"{\"B-short\"}\" and \"{\"I-short\"}\" represent respectively the beginning and intermediate tokens for abbreviations (acronyms).\"{\"B-long\"}\" and \"{\"I-long\"}\" represent respectively the beginning and intermediate tokens for expansions of abbreviations (acronyms meaning). All other tokens are represented by \"{\"O\"}\". \n\nGiven the space-separated tokens below,  write down for each token the corresponding BIO tag. Use a space to separate tags in the answer.\n\nTokens: {tokens|join(' ')}\nBIO tags:",
  "choices_template": null
 },
 "list_expansions": {
  "template": "List all the expansions (meanings) of the acronyms present in the following space-separated tokens. Return {\"\\\"No expansions found\\\"\"} if the expansions can't be found.\n\nTokens: {tokens|join(' ')}",
  "choices_template": null
 },
 "list_abbreviations": {
  "template": "List all the acryonyms in the following space-separated tokens: \n\n{tokens|join(' ')}",
  "choices_template": null
 },
 "find_acronyms_and_expansions": {
  "template": "{% set _dummy = none %}\n{% set abbr_exp_dict = namespace(value = {}) %}\n{% set abbr_string=namespace(value='') %}\n{% set exp_string=namespace(value='')%}\n \n{% for label_idx in range(labels|length) %}\n  {% if labels[label_idx] == 0 %}{# Long Beginning #}\n    {% set exp_string.value = tokens[label_idx] %}{# Create new long string #}\n  {% elif labels[label_idx] == 1 %}{# Short Beginning #}\n    {% if abbr_string.value!='' and abbr_string.value not in abbr_exp_dict.value.keys()%}{# Some string already present #}\n      {% set _dummy = abbr_exp_dict.value.update({abbr_string.value:''}) %}{# Discard this string as a new short string is coming #}\n    {% endif %}\n    {% set abbr_string.value = tokens[label_idx] %}{# Create new short string #}\n  {% elif labels[label_idx] == 2 %}{# Long Intermediate #}\n    {% set exp_string.value = exp_string.value+' '+tokens[label_idx] %}{# Update existing string #}\n  {% elif labels[label_idx] == 3 %}{# Short Intermediate #}\n    {% set abbr_string.value = abbr_string.value+tokens[label_idx] %}{# Update existing string #}\n  {% else %}{# Other #}\n    {# Both non-empty, and first characters match #}\n    {% if abbr_string.value!='' and exp_string.value!='' and exp_string.value.split()[0][0]|lower in abbr_string.value|lower and exp_string.value.split()[-1][0]|lower in abbr_string.value|lower%}\n      {# Update both the dictionaries #}\n      {% set _dummy = abbr_exp_dict.value.update({abbr_string.value:exp_string.value}) %}\n      {# Empty both the strings #}\n      {% set abbr_string.value= '' %}\n      {% set exp_string.value= '' %}\n    {% endif %}\n  {% endif %}\n{% endfor %}\n{# Both non-empty, and first characters match #}\n{% if abbr_string.value!='' and exp_string.value!='' %}\n  {% if exp_string.value.split()[0][0]|lower in abbr_string.value|lower and exp_string.value.split()[-1][0]|lower in abbr_string.value|lower %}\n    {# Update both the dictionaries #}\n    {% set _dummy = abbr_exp_dict.value.update({abbr_string.value:exp_string.value}) %}\n  {% elif abbr_exp_dict.value.items()|length==0 %}\n    {% set _dummy = abbr_exp_dict.value.update({abbr_string.value:exp_string.value}) %}\n  {% endif %}\n{% else %}\n  {% if abbr_string.value!=''%}\n    {% if abbr_string.value not in abbr_exp_dict.value.keys() %}\n      {% set _dummy = abbr_exp_dict.value.update({abbr_string.value:''}) %}\n    {% endif %}\n  {% endif %}\n{% endif %}\n \nGiven the following tokens, find the abbreviations (acronyms) and their expansions (acronyms meaning). Return {\"\\\"Unclear\\\"\"} if the expansion can't be found.\n \nTokens: {tokens|join(' ')}",
  "choices_template": null
 },
 "find_acronym": {
  "template": "{% set random_exp = '' %}{% set _dummy = none %}{% set exp_abbr_dict = namespace(value = {}) %}{% set abbr_string=namespace(value='') %}{% set exp_string=namespace(value='')%}{% for label_idx in range(labels|length) %}{% if labels[label_idx] == 0 %}{# Long Beginning #}{% if exp_string.value!='' and exp_string.value not in exp_abbr_dict.value.keys() %}{# Some string already present #}{% set _dummy = exp_abbr_dict.value.update({exp_string.value:''}) %}{# Discard this string as a new long string is coming #} {% endif %}{% set exp_string.value = tokens[label_idx] %}{# Create new long string #}{% elif labels[label_idx] == 1 %}{# Short Beginning #}{% set abbr_string.value = tokens[label_idx] %}{# Create new short string #}{% elif labels[label_idx] == 2 %}{# Long Intermediate #}{% set exp_string.value = exp_string.value+' '+tokens[label_idx] %}{# Update existing string #}{% elif labels[label_idx] == 3 %}{# Short Intermediate #}{% set abbr_string.value = abbr_string.value+tokens[label_idx] %}{# Update existing string #}{% else %}{# Other #}{# Both non-empty, and first characters match #}{% if abbr_string.value!='' and exp_string.value!='' and exp_string.value.split()[0][0]|lower in abbr_string.value|lower and exp_string.value.split()[-1][0]|lower in abbr_string.value|lower%}{# Update both the dictionaries #}{% set _dummy = exp_abbr_dict.value.update({exp_string.value:abbr_string.value}) %}{# Empty both the strings #}{% set abbr_string.value= '' %}{% set exp_string.value= '' %}{% endif %}{% endif %}{% endfor %}{# Both non-empty, and first characters match #}{% if abbr_string.value!='' and exp_string.value!='' %}{% if exp_string.value.split()[0][0]|lower in abbr_string.value|lower and exp_string.value.split()[-1][0]|lower in abbr_string.value|lower %}{# Update the dictionary #}{% set _dummy = exp_abbr_dict.value.update({exp_string.value:abbr_string.value}) %}{% elif exp_abbr_dict.value.items()|length==0 %}{% set _dummy = exp_abbr_dict.value.update({exp_string.value:abbr_string.value}) %}{% endif %}{% else %}{% if exp_string.value!='' %}{% if exp_string.value not in exp_abbr_dict.value.keys() %}{% set _dummy = exp_abbr_dict.value.update({exp_string.value:''}) %}{% endif %}{% endif %}{% endif %}{% if exp_abbr_dict.value.items()|length!=0 %}{% set random_exp = exp_abbr_dict.value.keys()|list|choice %}Given the tokens below, find the abbreviation (acronym) for: \"{random_exp}\". Return {\"\\\"Unclear\\\"\"} if the abbreviation can't be found.\n \nTokens: {tokens|join(' ')}\nAcronyms:",
  "choices_template": null
 }
}